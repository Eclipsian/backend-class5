generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://bctc:Bctc666!@lab.bctc.io:7087/xxt"
}

model Listing {
  id               Int                @id @default(autoincrement())
  isOriginal       Boolean
  originalUrl      String?
  originalUUID     String?
  originalDate     DateTime?
  isOriginalAds    Boolean?
  isSticky         Boolean
  stickyExpiration DateTime?
  isReviewed       Boolean
  authorName       String?
  authorUUID       String?
  htmlBody         String
  htmlTitle        String
  images           ListingImage[]
  contactPhone     String?
  userFavorite     UserFavorite[]
  user             User?              @relation(fields: [userId], references: [id])
  userId           Int?
  createdAt        DateTime
  category         ListingCategory
  subCategory      ListingSubCategory
  updatedAt        DateTime
  views            Int
  likes            Int
  shares           Int
}

model Comment {
  id        String   @id @default(uuid())
  author    User     @relation(fields: [userId], references: [id])
  userId    Int
  body      String
  createdAt DateTime
  updatedAt DateTime
  likes     Int
}

model ListingImage {
  id           String  @id @default(uuid())
  listing      Listing @relation(fields: [listingId], references: [id])
  url          String
  imageAltText String?
  listingId    Int
}

model NewsImage {
  id           String  @id @default(uuid())
  url          String
  imageAltText String?
  news         News    @relation(fields: [newsId], references: [id])
  newsId       Int
}

model News {
  id           Int          @id @default(autoincrement())
  originalUrl  String?
  originalUUID String?
  originalDate DateTime?
  source       String?
  htmlBody     String
  htmlTitle    String
  images       NewsImage[]
  category     NewsCategory
  fetchDate    DateTime?
  views        Int
  likes        Int
  shares       Int
  createdAt    DateTime
  updatedAt    DateTime
}

model User {
  id               Int            @id @default(autoincrement())
  phone            String?
  password         String
  email            String?
  avatar           String?
  openid           String?
  unionid          String?
  createdAt        DateTime
  updatedAt        DateTime
  userName         String
  favoriteListings UserFavorite[]
  listings         Listing[]
  gender           Gender
  province         String?
  city             String?
  language         String?
  country          String?
  ip               String?
  lastActiveAt     DateTime
  comment          Comment[]
}

model UserFavorite {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  listing   Listing  @relation(fields: [listingId], references: [id])
  listingId Int
  createdAt DateTime
}

enum Gender {
  male
  female
}

enum NewsCategory {
  speedy
  china
  entertainment
}

enum ListingCategory {
  rental
  realty
  travel
  hiring
  community
  buyAndSell
  professional
  training
}

enum ListingSubCategory {
  queens
  elmhurst
  flushing
  brooklyn
  manhattan
  longIslandNewJerseyOrOthers
  commercialProperty
  residencialProperty
  inspection
  travelAgency
  carpool
  taxi
  dating
  daycare
  church
  messageHiring
  communityOthers
  nailsHiring
  restaurantsHiring
  otherHiring
  applyingForJobs
  salesHiring
  internetHiring
  secondHandTrading
  phoneTrading
  carTrading
  computerTrading
  otherTrading
  decorationProfessional
  hvacProfessional
  movingProfessional
  securityCameraProfessional
  lawyers
  accountants
  insuranceProfessional
  financeProfessional
  citizenshipProfessional
  realtyProfessional
  studentVisaProfessional
  translationProfessional
  computerRepairProfessional
  webDesignProfessional
  printingProfessional
  spaProfessional
  massageProfessional
  healthProfessional
  drivingSchool
  photographer
  shippingProfessional
  tradeSchool
  prepSchool
  other
  zuzuwang
}
